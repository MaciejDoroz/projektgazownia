// Generated by view binder compiler. Do not edit!
package com.example.gazownia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gazownia.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CustomListLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout linLay1;

  @NonNull
  public final LinearLayout linLay2;

  @NonNull
  public final LinearLayout linLay3;

  @NonNull
  public final LinearLayout linLay4;

  @NonNull
  public final TextView listAdres;

  @NonNull
  public final TextView listDate;

  @NonNull
  public final Button listDelete;

  @NonNull
  public final Button listEdit;

  @NonNull
  public final TextView listEntry;

  @NonNull
  public final ConstraintLayout listLayout;

  @NonNull
  public final TextView listName;

  @NonNull
  public final TextView listPesel;

  private CustomListLayoutBinding(@NonNull ConstraintLayout rootView, @NonNull LinearLayout linLay1,
      @NonNull LinearLayout linLay2, @NonNull LinearLayout linLay3, @NonNull LinearLayout linLay4,
      @NonNull TextView listAdres, @NonNull TextView listDate, @NonNull Button listDelete,
      @NonNull Button listEdit, @NonNull TextView listEntry, @NonNull ConstraintLayout listLayout,
      @NonNull TextView listName, @NonNull TextView listPesel) {
    this.rootView = rootView;
    this.linLay1 = linLay1;
    this.linLay2 = linLay2;
    this.linLay3 = linLay3;
    this.linLay4 = linLay4;
    this.listAdres = listAdres;
    this.listDate = listDate;
    this.listDelete = listDelete;
    this.listEdit = listEdit;
    this.listEntry = listEntry;
    this.listLayout = listLayout;
    this.listName = listName;
    this.listPesel = listPesel;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CustomListLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CustomListLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.custom_list_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CustomListLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.linLay1;
      LinearLayout linLay1 = ViewBindings.findChildViewById(rootView, id);
      if (linLay1 == null) {
        break missingId;
      }

      id = R.id.linLay2;
      LinearLayout linLay2 = ViewBindings.findChildViewById(rootView, id);
      if (linLay2 == null) {
        break missingId;
      }

      id = R.id.linLay3;
      LinearLayout linLay3 = ViewBindings.findChildViewById(rootView, id);
      if (linLay3 == null) {
        break missingId;
      }

      id = R.id.linLay4;
      LinearLayout linLay4 = ViewBindings.findChildViewById(rootView, id);
      if (linLay4 == null) {
        break missingId;
      }

      id = R.id.listAdres;
      TextView listAdres = ViewBindings.findChildViewById(rootView, id);
      if (listAdres == null) {
        break missingId;
      }

      id = R.id.listDate;
      TextView listDate = ViewBindings.findChildViewById(rootView, id);
      if (listDate == null) {
        break missingId;
      }

      id = R.id.listDelete;
      Button listDelete = ViewBindings.findChildViewById(rootView, id);
      if (listDelete == null) {
        break missingId;
      }

      id = R.id.listEdit;
      Button listEdit = ViewBindings.findChildViewById(rootView, id);
      if (listEdit == null) {
        break missingId;
      }

      id = R.id.listEntry;
      TextView listEntry = ViewBindings.findChildViewById(rootView, id);
      if (listEntry == null) {
        break missingId;
      }

      ConstraintLayout listLayout = (ConstraintLayout) rootView;

      id = R.id.listName;
      TextView listName = ViewBindings.findChildViewById(rootView, id);
      if (listName == null) {
        break missingId;
      }

      id = R.id.listPesel;
      TextView listPesel = ViewBindings.findChildViewById(rootView, id);
      if (listPesel == null) {
        break missingId;
      }

      return new CustomListLayoutBinding((ConstraintLayout) rootView, linLay1, linLay2, linLay3,
          linLay4, listAdres, listDate, listDelete, listEdit, listEntry, listLayout, listName,
          listPesel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
